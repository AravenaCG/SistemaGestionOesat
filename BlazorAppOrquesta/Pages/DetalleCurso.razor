@page "/DetalleCurso/{CursoId}"

@inject HttpClient HttpClient
@inject HttpClient _httpClient
@using System.Text
@inject IJSRuntime jsRuntime
@using System.Net.Http.Headers;
@using Newtonsoft.Json
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using OfficeOpenXml;
@using OfficeOpenXml.Style;

<h3>DetalleCurso</h3>

<button type="button" class="btn btn-primary" @onclick="ExportarCSV">Exportar a .csv</button>




@if (Estudiantes == null)
{
    //<p><em>Loading... </em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Fecha de Nacimiento</th>
                <th>Documento</th>
                <th>Teléfono</th>
                <th>Dirección</th>
                <th>Email</th>
                <th>InstrumentoID</th>
                <th>Activo</th>
                <th>Nacionalidad</th>
                <th>Tmt_médico</th>
                <th>Ep_psico_motriz</th>
                <th>Particularidad</th>
                <th>Autoretiro</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var estudiante in Estudiantes)
            {
                <tr>
                    <td>@estudiante.Nombre</td>
                    <td>@estudiante.Apellido</td>
                    <td>@estudiante.FechaNacimiento.Value.Date.ToString("dd-MM-yyyy")</td>
                    <td>@estudiante.Documento</td>
                    <td>@estudiante.Telefono</td>
                    <td>@estudiante.Direccion</td>
                    <td>@estudiante.Email</td>
                    <td>@Estudiante.ObtenerNombreInstrumento(estudiante.InstrumentoId)</td>
                    <td>@estudiante.Activo</td>
                    <td>@estudiante.Nacionalidad</td>
                    <td>@estudiante.TmtMédico</td>
                    <td>@estudiante.EpPsicoMotriz</td>
                    <td>@estudiante.Particularidad</td>
                    <td>@estudiante.Autoretiro</td>
                    <!--    <td>-->
                    <!--        <button class="btn btn-danger btn-sm" @onclick="() => EliminarEstudiante(estudiante.EstudianteId)">Eliminar</button>-->
                        <!--   <button class="btn btn-primary btn-sm" @onclick="() => VerDetalleEstudiante(estudiante.EstudianteId)">Detalle</button>-->
                    <!--          <a href="/DetalleEstudiante/@estudiante.EstudianteId.ToString()">-->
                    <!--   Detalle </ a >-->
                    <!--       </td>-->
                </tr>
            }
        </tbody>
    </table>
}



@code {

    [Parameter]
    public string CursoId { get; set; }
    private string accessToken;
    private ICollection<BlazorAppOrquesta.Estudiante> Estudiantes;
    private BlazorAppOrquesta.OrquestaCñ orquestaClient = new OrquestaCñ("https://sistemagestionorquesta.azurewebsites.net", new HttpClient());

    protected override async Task OnInitializedAsync()
    {
        try
        {
            accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
            orquestaClient.SetAccessToken(accessToken);
            string cursoId = CursoId;
            int cursoInt = int.Parse(cursoId);
            

            Estudiantes = await EstudiantesPorCurso(cursoInt);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener el estudiante: {ex.Message}");
        }


    }






    private async Task<ICollection<BlazorAppOrquesta.Estudiante>> EstudiantesPorCurso(int cursoId)
    {
     
       return await orquestaClient.EstudiantesByCursoAsync(cursoId);
       
    }


    private byte[] GenerarArchivoExcel()
    {

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (var package = new ExcelPackage())
        {

            var worksheet = package.Workbook.Worksheets.Add("Estudiantes");
            // Agregar una hoja al paquete de Excel

            // Agregar encabezados de columnas
            worksheet.Cells[1, 1].Value = "Nombre";
            worksheet.Cells[1, 2].Value = "Apellido";
            worksheet.Cells[1, 3].Value = "Fecha de Nacimiento";
            worksheet.Cells[1, 4].Value = "Documento";
            worksheet.Cells[1, 5].Value = "Teléfono";
            worksheet.Cells[1, 6].Value = "Dirección";
            worksheet.Cells[1, 7].Value = "Email";
            worksheet.Cells[1, 8].Value = "Instrumento";
            worksheet.Cells[1, 9].Value = "Activo";
            worksheet.Cells[1, 10].Value = "Nacionalidad";
            worksheet.Cells[1, 11].Value = "Tmt_médico";
            worksheet.Cells[1, 12].Value = "Ep_psico_motriz";
            worksheet.Cells[1, 13].Value = "Particularidad";
            worksheet.Cells[1, 14].Value = "Autoretiro";

            // Fila inicial para los datos de los estudiantes
            int row = 2;

            // Agregar datos de estudiantes
            foreach (var estudiante in Estudiantes)
            {
                worksheet.Cells[row, 1].Value = estudiante.Nombre;
                worksheet.Cells[row, 2].Value = estudiante.Apellido;
                worksheet.Cells[row, 3].Value = estudiante.FechaNacimiento.Value.Date.ToString("dd-MM-yyyy");
                worksheet.Cells[row, 4].Value = estudiante.Documento;
                worksheet.Cells[row, 5].Value = estudiante.Telefono;
                worksheet.Cells[row, 6].Value = estudiante.Direccion;
                worksheet.Cells[row, 7].Value = estudiante.Email;
                worksheet.Cells[row, 8].Value = Estudiante.ObtenerNombreInstrumento(estudiante.InstrumentoId);
                worksheet.Cells[row, 9].Value = estudiante.Activo;            
                worksheet.Cells[row, 10].Value = estudiante.Nacionalidad;
                worksheet.Cells[row, 11].Value = estudiante.TmtMédico;
                worksheet.Cells[row, 12].Value = estudiante.EpPsicoMotriz;
                worksheet.Cells[row, 13].Value = estudiante.Particularidad;
                worksheet.Cells[row, 14].Value = estudiante.Autoretiro;

                row++;
            }

            // Autoajustar ancho de las columnas
            worksheet.Cells.AutoFitColumns();
            var range = worksheet.Cells[worksheet.Dimension.Address];
            var borderStyle = ExcelBorderStyle.Thin;

            // Establecer los bordes de todas las celdas en la tabla
            range.Style.Border.Top.Style = borderStyle;
            range.Style.Border.Bottom.Style = borderStyle;
            range.Style.Border.Left.Style = borderStyle;
            range.Style.Border.Right.Style = borderStyle;
            // Convierte el paquete Excel en bytes

            return package.GetAsByteArray();

        }
    }
    private async Task ExportarCSV()
    {
        // Generar el contenido del archivo Excel
        byte[] excelContent = GenerarArchivoExcel();

        // Nombre del archivo Excel
        string fileName = "estudiantes.xlsx";




        var module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./BlazorDownloadFile.js");
        await module.InvokeVoidAsync("BlazorDownloadFile", fileName, excelContent);

    }
}
