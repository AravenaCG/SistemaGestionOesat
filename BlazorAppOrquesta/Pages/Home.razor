@page "/"
@using BlazorAppOrquesta.Model
@using BlazorAppOrquestaAuthAPI
@using BlazorAppOrquesta.Interfaces
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using Newtonsoft.Json;


<PageTitle>Home</PageTitle>

<div class="login">
    <h1>Sistema de Gestión OESAT</h1>
    <form @onsubmit="HandleLogin">
        <InputText @bind-Value="@emailInput" placeholder="Email" />
        <InputText @bind-Value="@passwordInput" type="password" placeholder="Password" />
        <button type="submit" class="btn btn-primary btn-block btn-large">Ingresar</button>
    </form>
</div>

@if (showLoginSuccessMessage)
{
    <div class="alert alert-success" role="alert">
        ¡Inicio de sesión exitoso!
    </div>
}


@if (showLoginErrorMessage)
{
    <div class="alert alert-danger" role="alert">
        El inicio de sesión ha fallado.
    </div>
}
@code {
    private string emailInput;
    private string passwordInput;
    private bool showLoginSuccessMessage = false;
    private bool showLoginErrorMessage = false;

    private async Task HandleLogin()
    {

        try
        {
            var loginDto = new LoginUserDTOBz
                {
                    Email = emailInput,
                    Password = passwordInput
                };

            var response = await httpClient.PostAsJsonAsync("https://localhost:7231/usuario/login", loginDto);

            response.EnsureSuccessStatusCode(); // Lanza una excepción si la solicitud no es exitosa
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseContent);
            try
            {
                var tokenResponse = JsonConvert.DeserializeObject<TokenResponse>(responseContent);
                Console.WriteLine(tokenResponse.Token + " a vei");
                // Verifica si se obtuvo un token
                if (tokenResponse != null && !string.IsNullOrEmpty(tokenResponse.Token))
                {
                    var accessToken = tokenResponse.Token;

                    // Almacena el token en localStorage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", accessToken);

                    // Indica que el inicio de sesión fue exitoso
                    showLoginSuccessMessage = true;
                }
                else
                {
                    showLoginErrorMessage = true;

                    // Maneja el caso en el que no se obtiene un token válido
                    // Puedes mostrar un mensaje de error o realizar alguna otra acción
                    Console.WriteLine("No se obtuvo un token válido");
                }
            }catch(Exception ex)
            {
                Console.WriteLine(ex);
            }
            
        }
        catch (Exception ex)
        {
            showLoginErrorMessage = true;

            // Maneja el caso en el que la solicitud lanza una excepción
            // Puedes mostrar un mensaje de error o realizar alguna otra acción
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
