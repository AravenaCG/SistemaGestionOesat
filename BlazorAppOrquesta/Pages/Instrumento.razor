@page "/instrumento"
@inject HttpClient Http
@using System.IO
@using ZXing
@using ZXing.Common
@using System
@using System.Drawing
@using System.Web



<PageTitle>Instrumento</PageTitle>

<h3>Instrumento</h3>
<button class="btn btn-primary" @onclick="ObtenerListaInstrumentos">Obtener lista de Instrumentos</button>

@if (Instrumentos == null)
{
    //<p><em>Loading... </em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>InstrumentoId</th>
                <th>Nombre</th>
                <th>Detalles</th>
                <th>Disponible</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var instrumento in Instrumentos)
            {
                <tr>
                    <td>@instrumento.InstrumentoId</td>
                    <td>@instrumento.Nombre</td>
                    <td>@instrumento.Detalles</td>
                    <td>@instrumento.Disponible</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => GenerateAndDownloadQRCode(instrumento)">Eliminar</button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
}


@code {
    private ICollection<BlazorAppOrquesta.Instrumento> Instrumentos;
    private BlazorAppOrquesta.OrquestaCñ orquestaClient = new OrquestaCñ("https://sistemagestionorquesta.azurewebsites.net", new HttpClient());
    private byte[] qrCodeBytes;


    private async Task ObtenerListaInstrumentos()
    {
        // Realiza la llamada HTTP para obtener la lista de alumnos
        Instrumentos = await orquestaClient.InstrumentosAsync();
    }


    private byte[] GenerarQR(BlazorAppOrquesta.Instrumento instrumento)
    {
        string qrCodeData = $"InstrumentoId: {instrumento.InstrumentoId}\nNombre: {instrumento.Nombre}\nDetalles: {instrumento.Detalles}";
        BarcodeWriter writer = new BarcodeWriter();
        writer.Format = BarcodeFormat.QR_CODE;

        // Configuración adicional si es necesario
        EncodingOptions options = new EncodingOptions();
        options.Width = 300;
        options.Height = 300;
        options.Margin = 10; // Margen alrededor del código QR

        writer.Options = options;

        // Generar el código QR como un bitmap
        Bitmap qrCodeBitmap = writer.Write(qrCodeData);

        // Convertir el bitmap a bytes en formato JPEG
        using (MemoryStream ms = new MemoryStream())
        {
            qrCodeBitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
            return ms.ToArray();
        }
    }

    public static void GenerateAndDownloadQRCode(string qrCodeData)
    {
        byte[] qrCodeBytes = GenerateQRCodeAsJpgBytes(qrCodeData);

        // Descargar el archivo
        HttpContext.Current.Response.Clear();
        HttpContext.Current.Response.ContentType = "image/jpeg";
        HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment; filename=qrCode.jpg");
        HttpContext.Current.Response.BinaryWrite(qrCodeBytes);
        HttpContext.Current.Response.End();
    }
}
