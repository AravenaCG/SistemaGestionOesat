@page "/estudiante"
@using System.Text
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject HttpClient _httpClient
@using OfficeOpenXml;
@using OfficeOpenXml.Style;
@using System.Net.Http.Headers;
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Estudiante</PageTitle>

<h3>Estudiante</h3>

<button class="btn btn-primary" @onclick="ObtenerListaAlumnos">Obtener lista de alumnos</button>

<button type="button" class="btn btn-primary" @onclick="ExportarCSV">Exportar a .csv</button>

<div class="input-group mb-3">
    <input type="text" class="form-control" style="width: 90%;" @bind="filtroNombre" placeholder="Filtrar por nombre">
    <div class="input-group-append">
        <button class="btn btn-outline-secondary lupa-button" type="button" @onclick="BuscarAlumnoPorNombreYApellido">
            <img src="./classic-blue-magnifying-glass.png" alt="Buscar" class="lupa-icono"> <!-- Imagen de la lupa -->
        </button>
    </div>
</div>
@if (EstudiantesFiltrados == null)
{
    //<p><em>Loading... </em></p>
}
else{ 
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Fecha de Nacimiento</th>
                <th>Documento</th>
                <th>Teléfono</th>
                <th>Dirección</th>
                <th>Email</th>
                <th>InstrumentoID</th>
                <th>RutaFoto</th>
                <th>Activo</th>
                <th>Nombre Tutor</th>
                <th>Teléfono Tutor</th>
                <th>Asegurado</th>
                <th>Documento Tutor</th>
                <th>Documento Tutor2</th>
                <th>Nombre Tutor2</th>
                <th>Teléfono Tutor2</th>
                <th>Nacionalidad</th>
                <th>Tmt_médico</th>
                <th>Ep_psico_motriz</th>
                <th>Particularidad</th>
                <th>Autoretiro</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var estudiante in EstudiantesFiltrados)
            {
                <tr>
                    <td>@estudiante.Nombre</td>
                    <td>@estudiante.Apellido</td>
                    <td>@estudiante.FechaNacimiento.Value.Date.ToString("dd-MM-yyyy")</td>
                    <td>@estudiante.Documento</td>
                    <td>@estudiante.Telefono</td>
                    <td>@estudiante.Direccion</td>
                    <td>@estudiante.Email</td>
                    <td>@ObtenerNombreInstrumento(estudiante.InstrumentoId)</td>
                    <td>@estudiante.RutaFoto</td>
                    <td>@estudiante.Activo</td>
                    <td>@estudiante.NombreTutor</td>
                    <td>@estudiante.TelefonoTutor</td>
                    <td>@estudiante.Asegurado</td>
                    <td>@estudiante.DocumentoTutor</td>
                    <td>@estudiante.DocumentoTutor2</td>
                    <td>@estudiante.NombreTutor2</td>
                    <td>@estudiante.TelefonoTutor2</td>
                    <td>@estudiante.Nacionalidad</td>
                    <td>@estudiante.TmtMédico</td>
                    <td>@estudiante.EpPsicoMotriz</td>
                    <td>@estudiante.Particularidad</td>
                    <td>@estudiante.Autoretiro</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarEstudiante(estudiante.EstudianteId)">Eliminar</button>
                        <!--   <button class="btn btn-primary btn-sm" @onclick="() => VerDetalleEstudiante(estudiante.EstudianteId)">Detalle</button>-->
                        <a href="/DetalleEstudiante/@estudiante.EstudianteId.ToString()"> Detalle </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    }




@code {
    private ICollection<BlazorAppOrquesta.Estudiante> Estudiantes;
     private BlazorAppOrquesta.OrquestaCñ orquestaClient = new OrquestaCñ("https://sistemagestionorquesta.azurewebsites.net", new HttpClient());
    //private BlazorAppOrquesta.OrquestaCñ orquestaClient = new OrquestaCñ("https://localhost:7182", new HttpClient());

    public BlazorAppOrquesta.Estudiante estudianteDetallado;
    private string accessToken;

    List<BlazorAppOrquesta.Estudiante> EstudiantesFiltrados = new List<BlazorAppOrquesta.Estudiante>();
    string filtroNombre = "";
    void FiltrarPorNombre()
    {
        if (string.IsNullOrEmpty(filtroNombre))
        {
            // Si el filtro está vacío, mostrar todos los estudiantes
            EstudiantesFiltrados = Estudiantes.ToList();
        }
        else
        {
            // Filtrar la lista de estudiantes por nombre
            EstudiantesFiltrados = Estudiantes.Where(estudiante =>
                estudiante.Nombre.ToLower().Contains(filtroNombre.ToLower()) ||
                estudiante.Apellido.ToLower().Contains(filtroNombre.ToLower())
            ).ToList();
        }
    }

    private async Task ObtenerListaAlumnos()
    {
        try
        {
            // Obtiene el token de localStorage
            accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");


            orquestaClient.SetAccessToken(accessToken);

            Estudiantes = await orquestaClient.EstudiantesAsync();
            Console.WriteLine(Estudiantes.Count + ": Alumnos");
            FiltrarPorNombre();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public static string ObtenerNombreInstrumento(int? idIntrumento)
    {
        string nombreInstrumento = "";

        switch (idIntrumento)
        {
            case 1:
                nombreInstrumento = "Violín";
                break;
            case 2:
                nombreInstrumento = "Flauta";
                break;
            case 3:
                nombreInstrumento = "Trompeta";
                break;
            case 4:
                nombreInstrumento = "Violoncello";
                break;
            case 5:
                nombreInstrumento = "Contrabajo";
                break;
            case 6:
                nombreInstrumento = "Viola";
                break;
            case 7:
                nombreInstrumento = "Guitarra";
                break;
            case 8:
                nombreInstrumento = "Percusión";
                break;
            case 9:
                nombreInstrumento = "Clarinete";
                break;
            case 10:
                nombreInstrumento = "Bandoneón";
                break;
        }
        return nombreInstrumento;

    }

    private void BuscarAlumnoPorNombreYApellido()
    {
        FiltrarPorNombre(); // Aplicar filtro
    }

    

    private async Task EliminarEstudiante(Guid estudianteId)
    {
        // Aquí puedes llamar a un servicio o método para eliminar al estudiante con el ID proporcionado
        // Por ejemplo:
        await orquestaClient.BajaAsync(estudianteId);
        // Luego, puedes volver a cargar la lista de estudiantes para reflejar los cambios en la interfaz
        await ObtenerListaAlumnos();
    }


    private byte[] GenerarArchivoExcel()
    {

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (var package = new ExcelPackage())
        {

            var worksheet = package.Workbook.Worksheets.Add("Estudiantes");
            // Agregar una hoja al paquete de Excel

            // Agregar encabezados de columnas
            worksheet.Cells[1, 1].Value = "Nombre";
            worksheet.Cells[1, 2].Value = "Apellido";
            worksheet.Cells[1, 3].Value = "Fecha de Nacimiento";
            worksheet.Cells[1, 4].Value = "Documento";
            worksheet.Cells[1, 5].Value = "Teléfono";
            worksheet.Cells[1, 6].Value = "Dirección";
            worksheet.Cells[1, 7].Value = "Email";
            worksheet.Cells[1, 8].Value = "Instrumento";
            worksheet.Cells[1, 9].Value = "RutaFoto";
            worksheet.Cells[1, 10].Value = "Activo";
            worksheet.Cells[1, 11].Value = "Nombre Tutor";
            worksheet.Cells[1, 12].Value = "Teléfono Tutor";
            worksheet.Cells[1, 13].Value = "Asegurado";
            worksheet.Cells[1, 14].Value = "Documento Tutor";
            worksheet.Cells[1, 15].Value = "Documento Tutor2";
            worksheet.Cells[1, 16].Value = "Nombre Tutor2";
            worksheet.Cells[1, 17].Value = "Teléfono Tutor2";
            worksheet.Cells[1, 18].Value = "Nacionalidad";
            worksheet.Cells[1, 19].Value = "Tmt_médico";
            worksheet.Cells[1, 20].Value = "Ep_psico_motriz";
            worksheet.Cells[1, 21].Value = "Particularidad";
            worksheet.Cells[1, 22].Value = "Autoretiro";

            // Fila inicial para los datos de los estudiantes
            int row = 2;

            // Agregar datos de estudiantes
            foreach (var estudiante in Estudiantes)
            {
                worksheet.Cells[row, 1].Value = estudiante.Nombre;
                worksheet.Cells[row, 2].Value = estudiante.Apellido;
                worksheet.Cells[row, 3].Value = estudiante.FechaNacimiento.Value.Date.ToString("dd-MM-yyyy");
                worksheet.Cells[row, 4].Value = estudiante.Documento;
                worksheet.Cells[row, 5].Value = estudiante.Telefono;
                worksheet.Cells[row, 6].Value = estudiante.Direccion;
                worksheet.Cells[row, 7].Value = estudiante.Email;
                worksheet.Cells[row, 8].Value = ObtenerNombreInstrumento(estudiante.InstrumentoId);
                worksheet.Cells[row, 9].Value = estudiante.RutaFoto;
                worksheet.Cells[row, 10].Value = estudiante.Activo;
                worksheet.Cells[row, 11].Value = estudiante.NombreTutor;
                worksheet.Cells[row, 12].Value = estudiante.TelefonoTutor;
                worksheet.Cells[row, 13].Value = estudiante.Asegurado;
                worksheet.Cells[row, 14].Value = estudiante.DocumentoTutor;
                worksheet.Cells[row, 15].Value = estudiante.DocumentoTutor2;
                worksheet.Cells[row, 16].Value = estudiante.NombreTutor2;
                worksheet.Cells[row, 17].Value = estudiante.TelefonoTutor2;
                worksheet.Cells[row, 18].Value = estudiante.Nacionalidad;
                worksheet.Cells[row, 19].Value = estudiante.TmtMédico;
                worksheet.Cells[row, 20].Value = estudiante.EpPsicoMotriz;
                worksheet.Cells[row, 21].Value = estudiante.Particularidad;
                worksheet.Cells[row, 22].Value = estudiante.Autoretiro;

                row++;
            }

            // Autoajustar ancho de las columnas
            worksheet.Cells.AutoFitColumns();
            var range = worksheet.Cells[worksheet.Dimension.Address];
            var borderStyle = ExcelBorderStyle.Thin;

            // Establecer los bordes de todas las celdas en la tabla
            range.Style.Border.Top.Style = borderStyle;
            range.Style.Border.Bottom.Style = borderStyle;
            range.Style.Border.Left.Style = borderStyle;
            range.Style.Border.Right.Style = borderStyle;
            // Convierte el paquete Excel en bytes

            return package.GetAsByteArray();

        }
    }
    private async Task ExportarCSV()
    {
        // Generar el contenido del archivo Excel
        byte[] excelContent = GenerarArchivoExcel();

        // Nombre del archivo Excel
        string fileName = "estudiantes.xlsx";




        var module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./BlazorDownloadFile.js");
        await module.InvokeVoidAsync("BlazorDownloadFile", fileName, excelContent);

    }
    
    
   
}
